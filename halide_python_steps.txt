
# Wheels are available after all!
# However, the pip wheels are missing:
# - Autoschedulers
# - Metal Torch extensions
# - CUDA Torch extensions on Windows (no weak linkage)
# - Fix for forward declarations in scheduled pipelines (during PT wrapper generation)

# https://test.pypi.org/project/halide/16.0.0/#files
pip install -i https://test.pypi.org/simple/ halide==16.0.0

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


# Tested on:
- Win10 + VS2022
- Win11 + VS2019
- MacOS 13.1 Ventura
- MacOS 14.5 Sonoma + Xcode 15.4
- Ubuntu 22.04 + gcc 9.4.0

# CMD
Add "C++ ATL for latest v143 build tools (x86 & x64)" in VS2022 installer and reboot
Start "x64 native tools command prompt for VS 2022"
conda activate anyscale
LLVM15: conda install cmake=3.22 ninja=1.10
LLVM19: conda install cmake=3.28 ninja=1.12.1

# Clone llvm (match github.com/harskish/Halide/blob/main/.github/workflows/pip.yml#L15)
# Alternatively: curl https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-19.1.0.zip

# LLVM15
git clone --depth 1 --branch llvmorg-15.0.4 https://github.com/llvm/llvm-project.git llvm-15.0.4
cd llvm-15.0.4

# LLVM19
git clone --depth 1 --branch llvmorg-19.1.0 https://github.com/llvm/llvm-project.git llvm-19.1.0
cd llvm-19.1.0

# Fix line endings if on Linux:
Linux: dos2unix llvm/cmake/config.guess

# Possible targets: X86;NVPTX;ARM;AArch64;Mips;Hexagon;WebAssembly;
# Windows: targets ninja generator inside VS 2022 command prompt!
# NB: need to build X86 backend on MacOS (for examples)
LLVM15: cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" -DLLVM_TARGETS_TO_BUILD="X86;NVPTX;ARM;AArch64" -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_ZSTD=OFF -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_BUILD_32_BITS=OFF -S llvm -B build
LLVM19: cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_CURL=OFF -DLLVM_ENABLE_DIA_SDK=OFF -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_HTTPLIB=OFF -DLLVM_ENABLE_IDE=OFF -DLLVM_ENABLE_LIBEDIT=OFF -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_RUNTIMES=compiler-rt -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_ENABLE_ZLIB=OFF -DLLVM_ENABLE_ZSTD=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_TARGETS_TO_BUILD="WebAssembly;X86;AArch64;ARM;NVPTX" -S llvm -B build

# Build llvm
cmake --build build

# Install llvm
Windows, LLVM15: cmake --install build --prefix C:/libs/llvm15
Windows, LLVM19: cmake --install build --prefix C:/libs/llvm19
MacOS, LLVM15: cmake --install build --prefix ~/llvm15
MacOS, LLVM19: cmake --install build --prefix ~/llvm19

# Add to path (just for halide build?)
Windows, LLVM15: set LLVM_ROOT=C:/libs/llvm15 && set LLVM_CONFIG=C:/libs/llvm15/bin/llvm-config.exe
Windows, LLVM19: set LLVM_ROOT=C:/libs/llvm19 && set LLVM_CONFIG=C:/libs/llvm19/bin/llvm-config.exe
MacOS, LLVM15: export LLVM_ROOT=~/llvm15; export LLVM_CONFIG=~/llvm15/bin/llvm-config
MacOS, LLVM15: export LLVM_ROOT=~/llvm19; export LLVM_CONFIG=~/llvm19/bin/llvm-config

# Clone Halide (currently included as submodule)
git submodule update --init --recursive
LLVM15: cd lib/halide_ops/Halide_llvm15
LLVM19: cd lib/halide_ops/Halide_llvm19

# Create halide build dir
# Windows: run within x64 native tools command prompt
LLVM15: conda activate anyscale && bash -c "cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DWITH_PYTHON_BINDINGS=ON -DLLVM_DIR=$LLVM_ROOT/lib/cmake/llvm -S . -B ~/halide_build_llvm15"
LLVM19: conda activate anyscale && bash -c "cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DWITH_PYTHON_BINDINGS=ON -DLLVM_DIR=$LLVM_ROOT/lib/cmake/llvm -S . -B ~/halide_build_llvm19"

# Setup build aliases
Windows, LLVM15 (~/cmd_aliases/hlbuild15.bat): @conda activate anyscale && bash -c "cmake --build ~/halide_build_llvm15 && cmake --install ~/halide_build_llvm15 --prefix ~/halide-install_llvm15"
Windows, LLVM19 (~/cmd_aliases/hlbuild19.bat): @conda activate anyscale && bash -c "cmake --build ~/halide_build_llvm19 && cmake --install ~/halide_build_llvm19 --prefix ~/halide-install_llvm19"
  Add '~/cmd_aliases' to path
WSL: alias hlbuild='conda activate anyscale && cmake --build ~/halide_build && cmake --install ~/halide_build --prefix ~/halide-install'

# Build halide
# Windows: run within x64 native tools command prompt
hlbuild

# Create wheel
python create_wheel.py
